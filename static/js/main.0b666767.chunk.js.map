{"version":3,"sources":["Carre.js","Planche.js","Jeu.js","App.js","serviceWorker.js","index.js"],"names":["Carre","props","react_default","a","createElement","className","onClick","value","Planche","i","_this","this","src_Carre","carres","placeCarre","React","Component","calculerGagnant","lignes","length","_lignes$i","Object","slicedToArray","b","c","Jeu","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","historique","Array","fill","etapeNumero","xEstLeProchain","slice","setState","concat","niveau","status","_this2","courant","gagnant","tours","map","move","desc","key","jumpTo","src_Planche","changerClick","App","src_Jeu","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b666767.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Carre(props) {\n      return (\n        <button className=\"square\" onClick={props.onClick}>\n          {props.value}\n        </button>\n      );\n  }\n  \nexport default Carre\n","import React from 'react';\nimport Carre from './Carre';\n\nclass Planche extends React.Component {\n\n    placeCarre(i) {\n      // La valeur de chaque carré est soit X soit O soit null. Au click on envoie la fonction changerClick\n      return (\n        <Carre value={this.props.carres[i]} onClick={() => this.props.onClick(i)}/>\n      ); \n    }\n\n  \n    render() {\n  \n      return (\n        <div>\n          <div className=\"board-row\">\n            {this.placeCarre(0)}\n            {this.placeCarre(1)}\n            {this.placeCarre(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.placeCarre(3)}\n            {this.placeCarre(4)}\n            {this.placeCarre(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.placeCarre(6)}\n            {this.placeCarre(7)}\n            {this.placeCarre(8)}\n          </div>\n        </div>\n      );\n    }\n  }\n\n\n\n  export default Planche;","import React from 'react';\nimport Planche from './Planche';\n\nclass Jeu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // On crée une copie du tableau carres après chaque tour pour avoir un historique des coups\n      historique: [\n        {\n        carres: Array(9).fill(null),\n      }],\n      // Initialisation du jeu. Tour 0\n      etapeNumero: 0,\n      xEstLeProchain: true,\n    };\n  }\n\n  // Quand on clique sur un carré\n  changerClick(i) {\n    // appel du state historique. etapeNumero + 1 \n    const historique = this.state.historique.slice(0, this.state.etapeNumero + 1);\n    // courant = dernier el du tableau historique ? \n    const courant = historique[historique.length - 1];\n    // avec slice on crée une copie du tableau carres\n    const carres = courant.carres.slice();\n    // Ignorer un click si quelqu'un à gagné le jeu\n    if(calculerGagnant(carres) || carres[i]){\n      return;\n    }\n    // Un coup c'est X un coup c'est O\n    carres[i] = this.state.xEstLeProchain ? 'X' : 'O';\n    // au click on restitue X à chaque carre\n    this.setState({\n      // contrairement à push(), concat() ne modifie pas le tableau original\n        historique: historique.concat([{\n          carres: carres\n        }]),\n        // le numéro du niveau est l'obket historique qui contient la copie du tableau des carrés après chaque tour\n        etapeNumero: historique.length,\n      // // le bolléen est inversé pour déterminer quel joueur passera ensuite\n       xEstLeProchain: !this.state.xEstLeProchain\n    });\n  }\n\n  // Mettre à jour le tour, le niveau du jeu\n  jumpTo(niveau) {\n    this.setState({\n      // etapeNumreo reflète le déplacement affiché pour l'utilisateur maintenant. On affiche le niveau qu'il veut voir\n      etapeNumero: niveau,\n      // xEstLeProchain = true si si le nombre si etapeNumero est pair\n      xEstLeProchain: (niveau % 2) === 0,\n    });\n  }\n\n    render() {\n      // On met à jour le render pour uilisier la dernière entrée d'historique afin de déterminer et d'afficher l'état du jeu\n      const historique = this.state.historique;\n      // Quel joureur est entrain de jouer. Ou quel tour ..\n      const courant = historique[this.state.etapeNumero];\n      const gagnant = calculerGagnant(courant.carres);\n\n      // option du jeu historique\n      const tours = historique.map((niveau, move) => {\n        const desc = move ?\n        'Retourner au tour #' + move : 'Retourner au début du jeu';\n        return(\n          // quand on crée une liste il faut utiliser key afin que react comprenne quel composant il doit mettre à jour\n          <li key={move}><button onClick={() => this.jumpTo(move)}>{desc}</button></li>\n        )\n      })\n\n      let status; \n      if(gagnant) {\n        status = \"Le gagnant est : \" + gagnant;\n      } else {\n        status = \" Joueur suivant : \" + (this.state.xEstLeProchain ? 'X' : 'O')\n      }\n\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Planche carres={courant.carres} onClick={i => this.changerClick(i)} />\n          </div>\n          <div className=\"game-info\">\n            <div>{ status }</div>\n            <ol>{tours}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n  function calculerGagnant(carres) {\n    const lignes = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i=0; i < lignes.length; i++) {\n      const [a, b, c] = lignes[i];\n      if(carres[a] && carres[a] === carres[b] && carres[a] === carres[c]){\n        return carres[a];\n      }\n    }\n    return null;\n  }\n\n\n  export default Jeu; \n\n\n  ","import React from 'react';\nimport './App.css';\nimport Jeu from './Jeu';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Jeu />\n    </div>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}